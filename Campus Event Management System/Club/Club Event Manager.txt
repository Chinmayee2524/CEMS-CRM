public with sharing class ClubEventManager {
    
    // Method to retrieve events for a specific club
    @AuraEnabled
    public static List<Event__c> getClubEvents(Id clubId) {
        return [
            SELECT Id, Event_Name__c, Start_Date_Time__c, End_Date_Time__c, Event_Status__c 
            FROM Event__c 
            WHERE Organizer__c = :clubId 
            ORDER BY Start_Date_Time__c DESC
        ];
    }

    // Method to create a new event associated with a club
    @AuraEnabled
    public static String createEvent(Id clubId, String eventName, DateTime startDate, DateTime endDate, Integer maxAttendees, String location, Boolean isRecurring) {
        Event__c newEvent = new Event__c(
            Event_Name__c = eventName,
            Organizer__c = clubId,
            Start_Date_Time__c = startDate,
            End_Date_Time__c = endDate,
            Max_Seats__c = maxAttendees,
            Location__c = location,
            Recurring__c = isRecurring
        );

        try {
            insert newEvent;
            return 'Event created successfully with ID: ' + newEvent.Id;
        } catch (DmlException e) {
            return 'Error creating event: ' + e.getMessage();
        }
    }

    // Method to get event statistics for a specific club
    @AuraEnabled
    public static Map<String, Object> getEventStatistics(Id clubId) {
        // Count total events organized
        Integer totalEvents = [SELECT COUNT() FROM Event__c WHERE Organizer__c = :clubId];
        
        // Count total participants across all events
        Integer totalParticipants = [SELECT COUNT() FROM Event_Registration__c WHERE Event__r.Organizer__c = :clubId];

        Map<String, Object> statistics = new Map<String, Object>();
        statistics.put('TotalEvents', totalEvents);
        statistics.put('TotalParticipants', totalParticipants);

        return statistics;
    }
}